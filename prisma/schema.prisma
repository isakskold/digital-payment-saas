// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique  // Always required
  domain    String?  @unique  // Optional premium feature
  displayName String  // What customers see (e.g., "Mario's Pizza")
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menus Menu[]
  orders Order[]
}

model Menu {
  id          String   @id @default(cuid())
  tenantId    String   // Links to Tenant
  name        String   // "Lunch Menu", "Dinner Menu", etc.
  description String?  // Optional description
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false) // Which menu shows by default
  sortOrder   Int      @default(0)     // For ordering menus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  categories  MenuCategory[]
  items       MenuItem[]

  @@unique([tenantId, name]) // Prevent duplicate menu names per tenant
}

model MenuCategory {
  id          String   @id @default(cuid())
  menuId      String   // Links to Menu
  name        String   // "Pizzas", "Drinks", "Sides", etc.
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items       MenuItem[]

  @@unique([menuId, name]) // Prevent duplicate category names per menu
}

model MenuItem {
  id            String   @id @default(cuid())
  menuId        String   // Links to Menu
  categoryId    String   // Links to MenuCategory
  name          String   // "Margherita Pizza"
  description   String?  // "Fresh mozzarella, tomato sauce, basil"
  price         Decimal  @db.Decimal(10, 2)
  imageUrl      String?
  isAvailable   Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  menu          Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  category      MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@unique([menuId, name]) // Prevent duplicate item names per menu
}

model Order {
  id            String   @id @default(cuid())
  tenantId      String   // Links to Tenant
  orderNumber   String   // Human-readable order number (e.g., "MARIOS-001")
  orderType     OrderType @default(DELIVERY) // PICKUP or DELIVERY
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal  @db.Decimal(10, 2)
  taxAmount     Decimal  @db.Decimal(10, 2) @default(0)
  deliveryFee   Decimal  @db.Decimal(10, 2) @default(0)
  
  // Delivery-specific fields (only used when orderType = DELIVERY)
  deliveryAddress String?
  estimatedDeliveryTime DateTime?
  actualDeliveryTime DateTime?
  
  // Pickup-specific fields (only used when orderType = PICKUP)
  estimatedPickupTime DateTime?
  actualPickupTime DateTime?
  
  // General order information (for both pickup and delivery)
  orderInstructions String? // Special instructions for the order
  customerName  String  // For guest orders
  customerPhone String  // For guest orders
  customerEmail String  // For guest orders
  address       String? // For guest orders (delivery address)
  city          String?
  postalCode    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items        OrderItem[]

  @@unique([tenantId, orderNumber]) // Prevent duplicate order numbers per tenant
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String   // Links to Order
  menuItemId  String   // Links to MenuItem
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2) // Price at time of order
  totalPrice  Decimal  @db.Decimal(10, 2) // quantity * unitPrice
  specialInstructions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict)
}

enum OrderStatus {
  PENDING     // Order received, waiting for confirmation
  CONFIRMED   // Order confirmed by restaurant
  READY       // Order is ready for pickup/delivery
  OUT_FOR_DELIVERY // Order is being delivered
  CANCELLED   // Order was cancelled
  COMPLETED   // Order completed successfully
}

enum OrderType {
  PICKUP      // Customer picks up the order
  DELIVERY    // Order is delivered to customer
}